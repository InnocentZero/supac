* Supac - A declarative package manager
:PROPERTIES:
:ID:       45a3a394-d05b-438a-9a5e-06f96e1a87e4
:END:

Supac is a declarative package manager written in rust, and configurable in [[https://github.com/nushell/nushell][nushell]].
It is meant to emulate nix but without the headaches that come along with it. It does
not maintain packages by itself but rather hooks with the existing package managers on your
system to configure them in a declarative fashion.

** Install
:PROPERTIES:
:ID:       2f3fd273-9e3b-4f83-8053-49c493841891
:END:

Right now, the only way to install is via git

#+begin_src shell
  cargo install --git https://codeberg.org/innocentzer0/supac.git
#+end_src

To build it manually, clone the repo, ~cd~ into it, and run ~cargo build~

** Support
:PROPERTIES:
:ID:       2b69be5a-4830-485b-b321-dd27d3b51527
:END:
Right now the following package managers are supported:
- Arch Linux 
- Flatpak
- Cargo
- rustup

** Checklist of package managers
:PROPERTIES:
:ID:       2ffaa4f8-c89a-4e24-bb11-e7afb08e2cad
:END:

This is the order in which I wish to include package manager support:

- +rustup+
- uv/pipx
- opam
- npm
- dnf

** Upcoming features
:PROPERTIES:
:ID:       576a42fc-9fe5-411a-9dc8-490b7b31ab26
:END:

- Show unmanaged packages
- list active backends
- Allow disabling backends
- +clean-cache command+
- rebuild command
- +Flatpak systemwide installations+
- +=pacman= support for arch+
- Config validation
- allow setting config options for config-files whose config can be represented in a
  format parse-able by nushell
- Allow dry-run
- allow use of [[https://github.com/cargo-bins/cargo-binstall][cargo-binstall]] for cargo installations.

** Package declaration
:PROPERTIES:
:ID:       c01e5b6d-2456-442a-8f60-33dae3f92698
:END:

An example is provided in the [[./example_config/][example_config]] folder.

A brief rundown:

- ~/home/user/.config/supac/package.nu~ should return a nu record with one record per backend
- For =Arch=, the record consists of a list of package records, each package labelled by its name
  and an optional post hook after execution.
- For =Cargo=, again, a list of package records, with each record labelled by its package name,
  an optional git remote, an optional post hook, optionally specifying the following:
  - =all_features=: whether the binary should be installed with all the optional opt-in features
  - =no_default_features=: whether the binary should be installed without any feature whatsoever
  - =features=: a list of features that the binary supports that it should be installed with
- For =Flatpak=, it parses three subrecords:
  - =Pinned=: This is not compulsory, but this is a list of pinned runtimes, optionally specifying
    the branch and the architecture, along with a post hook and a systemwide cofig
  - =Packages=: Like the other two, this specifies a list of package records. These may optionally
    contain the remote from which to install, whether to install systemwide, and a post hook
  - =Remotes=: Useless as of now, will be useful once the =rebuild= command is released
- For =Rustup=, it parses a record, where each field's name is the toolchain that you wish to
  install, and the entries are a list of target triples and a list of components. All targets
  must be explicitly stated. Default components can be skipped.

Anything except the package name is not needed in a package specification. The file ~config.nu~
in the same directory should return a record giving out the configuration. As of now, only two
config options are implemented, which are fairly self-descriptive
